package com.tracemydata.service;

import com.tracemydata.dto.AuthResponse;
import com.tracemydata.dto.LoginRequest;
import com.tracemydata.dto.RegisterRequest;
import com.tracemydata.model.User;
import com.tracemydata.repository.UserRepository;
import com.tracemydata.util.JwtUtil;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Map;
import java.util.Optional;
import java.util.UUID;

@Service
public class AuthService {

    private final UserRepository userRepo;
    private final BCryptPasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;
    private final RestTemplate restTemplate;

    public AuthService(UserRepository userRepo, JwtUtil jwtUtil, RestTemplate restTemplate) {
        this.userRepo = userRepo;
        this.passwordEncoder = new BCryptPasswordEncoder();
        this.jwtUtil = jwtUtil;
        this.restTemplate = restTemplate;
    }
    @Transactional
    public AuthResponse register(RegisterRequest request) {
        userRepo.findByEmail(request.getEmail()).ifPresent(u -> {
            throw new RuntimeException("Email already registered");
        });

        User newUser = new User();
        newUser.setUserName(request.getUserName());
        newUser.setFirstName(request.getFirstName());
        newUser.setLastName(request.getLastName());
        newUser.setEmail(request.getEmail());
        newUser.setPasswordHash(passwordEncoder.encode(request.getPassword()));
        newUser.setAuthProvider("local");

        User savedUser = userRepo.save(newUser);
        String token = jwtUtil.generateToken(savedUser);
        return mapToAuthResponse(savedUser, token);
    }

    public AuthResponse login(LoginRequest request) {
        User user = userRepo.findByEmail(request.getEmail())
                .orElseThrow(() -> new RuntimeException("User not found"));

        if (!user.getAuthProvider().equals("local")) {
            throw new RuntimeException("This account uses " + user.getAuthProvider() + " login");
        }

        if (!passwordEncoder.matches(request.getPassword(), user.getPasswordHash())) {
            throw new RuntimeException("Invalid credentials");
        }

        String token = jwtUtil.generateToken(user);
        return mapToAuthResponse(user, token);
    }
    
    public AuthResponse loginWithGoogle(String idToken) {
        Map<String, Object> payload = jwtUtil.verifyGoogleToken(idToken);
        return handleOAuthLogin(payload, "google");
    }
    
    public AuthResponse loginWithOutlook(String accessToken) {
        Map<String, Object> payload = jwtUtil.verifyOutlookToken(accessToken);
        return handleOAuthLogin(payload, "outlook");
    }
    @Transactional
    private AuthResponse handleOAuthLogin(Map<String, Object> payload, String provider) {
        String email = (String) payload.get("email");
        String name = (String) payload.get("name");

        User user = userRepo.findByEmail(email).orElseGet(() -> {
            User newUser = new User();
            newUser.setId(UUID.randomUUID());
            newUser.setEmail(email);
            newUser.setUserName(name);
            newUser.setAuthProvider(provider);
            return userRepo.save(newUser);
        });

        String token = jwtUtil.generateToken(user);
        return mapToAuthResponse(user, token);
    }

    private AuthResponse mapToAuthResponse(User user, String token) {
        AuthResponse response = new AuthResponse();
        response.setUserName(user.getUserName());
        response.setEmail(user.getEmail());
        response.setAuthProvider(user.getAuthProvider());
        response.setToken(token);
        return response;
    }
}
